//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, from as _observableFrom, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import moment from 'moment';
import {ApiClientBase} from './api-client-base';

export const API_BASE_URL = "API_BASE_URL";

@Injectable({
    providedIn: 'root'
})
export class ApiClient extends ApiClientBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    appsAll(): Observable<Application[]> {
        let url_ = this.baseUrl + "/api/v1/apps";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAppsAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAppsAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Application[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Application[]>;
        }));
    }

    protected processAppsAll(response: HttpResponseBase): Observable<Application[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Application.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    appsPOST(body: CreateApplicationSchema | undefined): Observable<Application> {
        let url_ = this.baseUrl + "/api/v1/apps";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAppsPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAppsPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Application>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Application>;
        }));
    }

    protected processAppsPOST(response: HttpResponseBase): Observable<Application> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Application.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    appsGET(applicationId: string): Observable<Application> {
        let url_ = this.baseUrl + "/api/v1/apps/{applicationId}";
        if (applicationId === undefined || applicationId === null)
            throw new Error("The parameter 'applicationId' must be defined.");
        url_ = url_.replace("{applicationId}", encodeURIComponent("" + applicationId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAppsGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAppsGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Application>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Application>;
        }));
    }

    protected processAppsGET(response: HttpResponseBase): Observable<Application> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Application.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    appsPUT(applicationId: string, body: UpdateApplicationSchema | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/apps/{applicationId}";
        if (applicationId === undefined || applicationId === null)
            throw new Error("The parameter 'applicationId' must be defined.");
        url_ = url_.replace("{applicationId}", encodeURIComponent("" + applicationId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAppsPUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAppsPUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAppsPUT(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    appsDELETE(applicationId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/apps/{applicationId}";
        if (applicationId === undefined || applicationId === null)
            throw new Error("The parameter 'applicationId' must be defined.");
        url_ = url_.replace("{applicationId}", encodeURIComponent("" + applicationId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAppsDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAppsDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAppsDELETE(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param applicationKey (optional)
     * @return OK
     */
    search(applicationKey: string | undefined): Observable<Application> {
        let url_ = this.baseUrl + "/api/v1/apps/search?";
        if (applicationKey === null)
            throw new Error("The parameter 'applicationKey' cannot be null.");
        else if (applicationKey !== undefined)
            url_ += "applicationKey=" + encodeURIComponent("" + applicationKey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Application>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Application>;
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<Application> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Application.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    releasesAll(applicationId: string): Observable<Release[]> {
        let url_ = this.baseUrl + "/api/v1/apps/{applicationId}/releases";
        if (applicationId === undefined || applicationId === null)
            throw new Error("The parameter 'applicationId' must be defined.");
        url_ = url_.replace("{applicationId}", encodeURIComponent("" + applicationId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processReleasesAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReleasesAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Release[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Release[]>;
        }));
    }

    protected processReleasesAll(response: HttpResponseBase): Observable<Release[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Release.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    branchesAll(applicationId: string): Observable<Branch[]> {
        let url_ = this.baseUrl + "/api/v1/apps/{applicationId}/branches";
        if (applicationId === undefined || applicationId === null)
            throw new Error("The parameter 'applicationId' must be defined.");
        url_ = url_.replace("{applicationId}", encodeURIComponent("" + applicationId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processBranchesAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBranchesAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Branch[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Branch[]>;
        }));
    }

    protected processBranchesAll(response: HttpResponseBase): Observable<Branch[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Branch.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    branchesPOST(applicationId: string, body: CreateBranchSchema | undefined): Observable<Branch> {
        let url_ = this.baseUrl + "/api/v1/apps/{applicationId}/branches";
        if (applicationId === undefined || applicationId === null)
            throw new Error("The parameter 'applicationId' must be defined.");
        url_ = url_.replace("{applicationId}", encodeURIComponent("" + applicationId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processBranchesPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBranchesPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Branch>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Branch>;
        }));
    }

    protected processBranchesPOST(response: HttpResponseBase): Observable<Branch> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Branch.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    branchesGET(applicationId: string, branchId: string): Observable<Branch> {
        let url_ = this.baseUrl + "/api/v1/apps/{applicationId}/branches/{branchId}";
        if (applicationId === undefined || applicationId === null)
            throw new Error("The parameter 'applicationId' must be defined.");
        url_ = url_.replace("{applicationId}", encodeURIComponent("" + applicationId));
        if (branchId === undefined || branchId === null)
            throw new Error("The parameter 'branchId' must be defined.");
        url_ = url_.replace("{branchId}", encodeURIComponent("" + branchId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processBranchesGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBranchesGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Branch>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Branch>;
        }));
    }

    protected processBranchesGET(response: HttpResponseBase): Observable<Branch> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Branch.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    branchesPUT(applicationId: string, branchId: string, body: UpdateBranchSchema | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/apps/{applicationId}/branches/{branchId}";
        if (applicationId === undefined || applicationId === null)
            throw new Error("The parameter 'applicationId' must be defined.");
        url_ = url_.replace("{applicationId}", encodeURIComponent("" + applicationId));
        if (branchId === undefined || branchId === null)
            throw new Error("The parameter 'branchId' must be defined.");
        url_ = url_.replace("{branchId}", encodeURIComponent("" + branchId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processBranchesPUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBranchesPUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processBranchesPUT(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    branchesDELETE(applicationId: string, branchId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/apps/{applicationId}/branches/{branchId}";
        if (applicationId === undefined || applicationId === null)
            throw new Error("The parameter 'applicationId' must be defined.");
        url_ = url_.replace("{applicationId}", encodeURIComponent("" + applicationId));
        if (branchId === undefined || branchId === null)
            throw new Error("The parameter 'branchId' must be defined.");
        url_ = url_.replace("{branchId}", encodeURIComponent("" + branchId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processBranchesDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBranchesDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processBranchesDELETE(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    migrate(): Observable<string> {
        let url_ = this.baseUrl + "/api/v1/migrate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processMigrate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMigrate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processMigrate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;

            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    diff(body: AssetInfo[] | undefined): Observable<ReleaseDifference> {
        let url_ = this.baseUrl + "/api/v1/releases/diff";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDiff(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDiff(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ReleaseDifference>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ReleaseDifference>;
        }));
    }

    protected processDiff(response: HttpResponseBase): Observable<ReleaseDifference> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReleaseDifference.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    releasesPOST(body: CreateReleaseSchema | undefined): Observable<ReleaseDifference> {
        let url_ = this.baseUrl + "/api/v1/releases";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processReleasesPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReleasesPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ReleaseDifference>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ReleaseDifference>;
        }));
    }

    protected processReleasesPOST(response: HttpResponseBase): Observable<ReleaseDifference> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReleaseDifference.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    releasesPUT(releaseId: string, body: UpdateReleaseSchema | undefined): Observable<Release> {
        let url_ = this.baseUrl + "/api/v1/releases/{releaseId}";
        if (releaseId === undefined || releaseId === null)
            throw new Error("The parameter 'releaseId' must be defined.");
        url_ = url_.replace("{releaseId}", encodeURIComponent("" + releaseId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processReleasesPUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReleasesPUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Release>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Release>;
        }));
    }

    protected processReleasesPUT(response: HttpResponseBase): Observable<Release> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Release.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param assets (optional)
     * @param zip (optional)
     * @return OK
     */
    assets(releaseId: string, assets: AssetInfo[] | undefined, zip: FileParameter | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/releases/{releaseId}/assets";
        if (releaseId === undefined || releaseId === null)
            throw new Error("The parameter 'releaseId' must be defined.");
        url_ = url_.replace("{releaseId}", encodeURIComponent("" + releaseId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (assets === null || assets === undefined)
            throw new Error("The parameter 'assets' cannot be null.");
        else
            assets.forEach(item_ => content_.append("assets", item_.toString()));
        if (zip === null || zip === undefined)
            throw new Error("The parameter 'zip' cannot be null.");
        else
            content_.append("zip", zip.data, zip.fileName ? zip.fileName : "zip");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAssets(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAssets(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAssets(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    assetsAll(releaseId: string): Observable<AssetInfo[]> {
        let url_ = this.baseUrl + "/api/v1/releases/{releaseId}/assets";
        if (releaseId === undefined || releaseId === null)
            throw new Error("The parameter 'releaseId' must be defined.");
        url_ = url_.replace("{releaseId}", encodeURIComponent("" + releaseId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAssetsAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAssetsAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AssetInfo[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AssetInfo[]>;
        }));
    }

    protected processAssetsAll(response: HttpResponseBase): Observable<AssetInfo[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AssetInfo.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    downloadGET(releaseId: string): Observable<DownloadUrlResponseSchema> {
        let url_ = this.baseUrl + "/api/v1/releases/{releaseId}/assets/download";
        if (releaseId === undefined || releaseId === null)
            throw new Error("The parameter 'releaseId' must be defined.");
        url_ = url_.replace("{releaseId}", encodeURIComponent("" + releaseId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDownloadGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownloadGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DownloadUrlResponseSchema>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DownloadUrlResponseSchema>;
        }));
    }

    protected processDownloadGET(response: HttpResponseBase): Observable<DownloadUrlResponseSchema> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DownloadUrlResponseSchema.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    downloadPOST(releaseId: string, body: AssetInfo[] | undefined): Observable<DownloadUrlResponseSchema> {
        let url_ = this.baseUrl + "/api/v1/releases/{releaseId}/assets/download";
        if (releaseId === undefined || releaseId === null)
            throw new Error("The parameter 'releaseId' must be defined.");
        url_ = url_.replace("{releaseId}", encodeURIComponent("" + releaseId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDownloadPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownloadPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DownloadUrlResponseSchema>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DownloadUrlResponseSchema>;
        }));
    }

    protected processDownloadPOST(response: HttpResponseBase): Observable<DownloadUrlResponseSchema> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DownloadUrlResponseSchema.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    installersAll(releaseId: string): Observable<Installer[]> {
        let url_ = this.baseUrl + "/api/v1/releases/{releaseId}/installers";
        if (releaseId === undefined || releaseId === null)
            throw new Error("The parameter 'releaseId' must be defined.");
        url_ = url_.replace("{releaseId}", encodeURIComponent("" + releaseId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processInstallersAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInstallersAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Installer[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Installer[]>;
        }));
    }

    protected processInstallersAll(response: HttpResponseBase): Observable<Installer[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Installer.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param file (optional)
     * @return OK
     */
    installers(releaseId: string, file: FileParameter | undefined): Observable<Installer> {
        let url_ = this.baseUrl + "/api/v1/releases/{releaseId}/installers";
        if (releaseId === undefined || releaseId === null)
            throw new Error("The parameter 'releaseId' must be defined.");
        url_ = url_.replace("{releaseId}", encodeURIComponent("" + releaseId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file === null || file === undefined)
            throw new Error("The parameter 'file' cannot be null.");
        else
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processInstallers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInstallers(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Installer>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Installer>;
        }));
    }

    protected processInstallers(response: HttpResponseBase): Observable<Installer> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Installer.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    downloadGET2(releaseId: string, installerId: string): Observable<DownloadUrlResponseSchema> {
        let url_ = this.baseUrl + "/api/v1/releases/{releaseId}/installers/{installerId}/download";
        if (releaseId === undefined || releaseId === null)
            throw new Error("The parameter 'releaseId' must be defined.");
        url_ = url_.replace("{releaseId}", encodeURIComponent("" + releaseId));
        if (installerId === undefined || installerId === null)
            throw new Error("The parameter 'installerId' must be defined.");
        url_ = url_.replace("{installerId}", encodeURIComponent("" + installerId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDownloadGET2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownloadGET2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DownloadUrlResponseSchema>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DownloadUrlResponseSchema>;
        }));
    }

    protected processDownloadGET2(response: HttpResponseBase): Observable<DownloadUrlResponseSchema> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DownloadUrlResponseSchema.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    tokensAll(): Observable<Token[]> {
        let url_ = this.baseUrl + "/api/v1/tokens";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTokensAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTokensAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Token[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Token[]>;
        }));
    }

    protected processTokensAll(response: HttpResponseBase): Observable<Token[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Token.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    tokensPOST(body: CreateTokenSchema | undefined): Observable<TokenResponse> {
        let url_ = this.baseUrl + "/api/v1/tokens";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTokensPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTokensPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TokenResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TokenResponse>;
        }));
    }

    protected processTokensPOST(response: HttpResponseBase): Observable<TokenResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TokenResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    tokensDELETE(tokenId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/tokens/{tokenId}";
        if (tokenId === undefined || tokenId === null)
            throw new Error("The parameter 'tokenId' must be defined.");
        url_ = url_.replace("{tokenId}", encodeURIComponent("" + tokenId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processTokensDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTokensDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processTokensDELETE(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class Application implements IApplication {
    id!: string;
    key!: string | undefined;
    name!: string | undefined;
    description?: string | undefined;
    createdAt!: moment.Moment;
    deletedAt?: moment.Moment | undefined;
    mainBranch!: string | undefined;
    defaultReleaseLifetime?: string | undefined;
    defaultLatestReleaseLifetime?: string | undefined;

    constructor(data?: IApplication) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.key = _data["key"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>undefined;
            this.deletedAt = _data["deletedAt"] ? moment(_data["deletedAt"].toString()) : <any>undefined;
            this.mainBranch = _data["mainBranch"];
            this.defaultReleaseLifetime = _data["defaultReleaseLifetime"];
            this.defaultLatestReleaseLifetime = _data["defaultLatestReleaseLifetime"];
        }
    }

    static fromJS(data: any): Application {
        data = typeof data === 'object' ? data : {};
        let result = new Application();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["key"] = this.key;
        data["name"] = this.name;
        data["description"] = this.description;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["deletedAt"] = this.deletedAt ? this.deletedAt.toISOString() : <any>undefined;
        data["mainBranch"] = this.mainBranch;
        data["defaultReleaseLifetime"] = this.defaultReleaseLifetime;
        data["defaultLatestReleaseLifetime"] = this.defaultLatestReleaseLifetime;
        return data;
    }
}

export interface IApplication {
    id: string;
    key: string | undefined;
    name: string | undefined;
    description?: string | undefined;
    createdAt: moment.Moment;
    deletedAt?: moment.Moment | undefined;
    mainBranch: string | undefined;
    defaultReleaseLifetime?: string | undefined;
    defaultLatestReleaseLifetime?: string | undefined;
}

export class AssetInfo implements IAssetInfo {
    fileName!: string | undefined;
    fileHash!: string | undefined;

    constructor(data?: IAssetInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileName = _data["fileName"];
            this.fileHash = _data["fileHash"];
        }
    }

    static fromJS(data: any): AssetInfo {
        data = typeof data === 'object' ? data : {};
        let result = new AssetInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["fileHash"] = this.fileHash;
        return data;
    }
}

export interface IAssetInfo {
    fileName: string | undefined;
    fileHash: string | undefined;
}

export class Branch implements IBranch {
    id?: string;
    applicationId?: string;
    name!: string | undefined;
    createdAt?: moment.Moment;
    deletedAt?: moment.Moment | undefined;
    latestReleaseLifetime?: string | undefined;
    releaseLifetime?: string | undefined;
    useDefaultReleaseLifetime?: boolean;

    constructor(data?: IBranch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.applicationId = _data["applicationId"];
            this.name = _data["name"];
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>undefined;
            this.deletedAt = _data["deletedAt"] ? moment(_data["deletedAt"].toString()) : <any>undefined;
            this.latestReleaseLifetime = _data["latestReleaseLifetime"];
            this.releaseLifetime = _data["releaseLifetime"];
            this.useDefaultReleaseLifetime = _data["useDefaultReleaseLifetime"];
        }
    }

    static fromJS(data: any): Branch {
        data = typeof data === 'object' ? data : {};
        let result = new Branch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["applicationId"] = this.applicationId;
        data["name"] = this.name;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["deletedAt"] = this.deletedAt ? this.deletedAt.toISOString() : <any>undefined;
        data["latestReleaseLifetime"] = this.latestReleaseLifetime;
        data["releaseLifetime"] = this.releaseLifetime;
        data["useDefaultReleaseLifetime"] = this.useDefaultReleaseLifetime;
        return data;
    }
}

export interface IBranch {
    id?: string;
    applicationId?: string;
    name: string | undefined;
    createdAt?: moment.Moment;
    deletedAt?: moment.Moment | undefined;
    latestReleaseLifetime?: string | undefined;
    releaseLifetime?: string | undefined;
    useDefaultReleaseLifetime?: boolean;
}

export class CreateApplicationSchema implements ICreateApplicationSchema {
    key!: string | undefined;
    name!: string | undefined;
    description!: string | undefined;
    mainBranch?: string | undefined;

    constructor(data?: ICreateApplicationSchema) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.mainBranch = _data["mainBranch"];
        }
    }

    static fromJS(data: any): CreateApplicationSchema {
        data = typeof data === 'object' ? data : {};
        let result = new CreateApplicationSchema();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["name"] = this.name;
        data["description"] = this.description;
        data["mainBranch"] = this.mainBranch;
        return data;
    }
}

export interface ICreateApplicationSchema {
    key: string | undefined;
    name: string | undefined;
    description: string | undefined;
    mainBranch?: string | undefined;
}

export class CreateBranchSchema implements ICreateBranchSchema {
    name!: string | undefined;
    releaseLifetime?: string | undefined;
    latestReleaseLifetime?: string | undefined;
    useDefaultReleaseLifetime?: boolean;

    constructor(data?: ICreateBranchSchema) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.releaseLifetime = _data["releaseLifetime"];
            this.latestReleaseLifetime = _data["latestReleaseLifetime"];
            this.useDefaultReleaseLifetime = _data["useDefaultReleaseLifetime"];
        }
    }

    static fromJS(data: any): CreateBranchSchema {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBranchSchema();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["releaseLifetime"] = this.releaseLifetime;
        data["latestReleaseLifetime"] = this.latestReleaseLifetime;
        data["useDefaultReleaseLifetime"] = this.useDefaultReleaseLifetime;
        return data;
    }
}

export interface ICreateBranchSchema {
    name: string | undefined;
    releaseLifetime?: string | undefined;
    latestReleaseLifetime?: string | undefined;
    useDefaultReleaseLifetime?: boolean;
}

export class CreateReleaseSchema implements ICreateReleaseSchema {
    applicationKey!: string | undefined;
    branch?: string | undefined;
    platform?: string | undefined;
    version!: string | undefined;

    constructor(data?: ICreateReleaseSchema) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.applicationKey = _data["applicationKey"];
            this.branch = _data["branch"];
            this.platform = _data["platform"];
            this.version = _data["version"];
        }
    }

    static fromJS(data: any): CreateReleaseSchema {
        data = typeof data === 'object' ? data : {};
        let result = new CreateReleaseSchema();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["applicationKey"] = this.applicationKey;
        data["branch"] = this.branch;
        data["platform"] = this.platform;
        data["version"] = this.version;
        return data;
    }
}

export interface ICreateReleaseSchema {
    applicationKey: string | undefined;
    branch?: string | undefined;
    platform?: string | undefined;
    version: string | undefined;
}

export class CreateTokenSchema implements ICreateTokenSchema {
    name!: string | undefined;
    mask!: string | undefined;
    expiresAt?: moment.Moment | undefined;

    constructor(data?: ICreateTokenSchema) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.mask = _data["mask"];
            this.expiresAt = _data["expiresAt"] ? moment(_data["expiresAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateTokenSchema {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTokenSchema();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["mask"] = this.mask;
        data["expiresAt"] = this.expiresAt ? this.expiresAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICreateTokenSchema {
    name: string | undefined;
    mask: string | undefined;
    expiresAt?: moment.Moment | undefined;
}

export class DownloadUrlResponseSchema implements IDownloadUrlResponseSchema {
    url!: string | undefined;

    constructor(data?: IDownloadUrlResponseSchema) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): DownloadUrlResponseSchema {
        data = typeof data === 'object' ? data : {};
        let result = new DownloadUrlResponseSchema();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["url"] = this.url;
        return data;
    }
}

export interface IDownloadUrlResponseSchema {
    url: string | undefined;
}

export class Installer implements IInstaller {
    installerId!: string;
    releaseId!: string;
    fileName!: string | undefined;
    fileId!: string;
    createdAt!: moment.Moment;
    deletedAt?: moment.Moment | undefined;

    constructor(data?: IInstaller) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.installerId = _data["installerId"];
            this.releaseId = _data["releaseId"];
            this.fileName = _data["fileName"];
            this.fileId = _data["fileId"];
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>undefined;
            this.deletedAt = _data["deletedAt"] ? moment(_data["deletedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Installer {
        data = typeof data === 'object' ? data : {};
        let result = new Installer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["installerId"] = this.installerId;
        data["releaseId"] = this.releaseId;
        data["fileName"] = this.fileName;
        data["fileId"] = this.fileId;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["deletedAt"] = this.deletedAt ? this.deletedAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IInstaller {
    installerId: string;
    releaseId: string;
    fileName: string | undefined;
    fileId: string;
    createdAt: moment.Moment;
    deletedAt?: moment.Moment | undefined;
}

export class Release implements IRelease {
    id!: string;
    branchId!: string;
    version!: string | undefined;
    platform?: string | undefined;
    releaseNotes?: string | undefined;
    createdAt!: moment.Moment;
    deletedAt?: moment.Moment | undefined;

    constructor(data?: IRelease) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.branchId = _data["branchId"];
            this.version = _data["version"];
            this.platform = _data["platform"];
            this.releaseNotes = _data["releaseNotes"];
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>undefined;
            this.deletedAt = _data["deletedAt"] ? moment(_data["deletedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Release {
        data = typeof data === 'object' ? data : {};
        let result = new Release();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["branchId"] = this.branchId;
        data["version"] = this.version;
        data["platform"] = this.platform;
        data["releaseNotes"] = this.releaseNotes;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["deletedAt"] = this.deletedAt ? this.deletedAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IRelease {
    id: string;
    branchId: string;
    version: string | undefined;
    platform?: string | undefined;
    releaseNotes?: string | undefined;
    createdAt: moment.Moment;
    deletedAt?: moment.Moment | undefined;
}

export class ReleaseDifference implements IReleaseDifference {
    filesToUpload!: string[] | undefined;

    constructor(data?: IReleaseDifference) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["filesToUpload"])) {
                this.filesToUpload = [] as any;
                for (let item of _data["filesToUpload"])
                    this.filesToUpload!.push(item);
            }
        }
    }

    static fromJS(data: any): ReleaseDifference {
        data = typeof data === 'object' ? data : {};
        let result = new ReleaseDifference();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.filesToUpload)) {
            data["filesToUpload"] = [];
            for (let item of this.filesToUpload)
                data["filesToUpload"].push(item);
        }
        return data;
    }
}

export interface IReleaseDifference {
    filesToUpload: string[] | undefined;
}

export class Token implements IToken {
    id!: string;
    name!: string | undefined;
    issuedAt!: moment.Moment;
    expiresAt!: moment.Moment;
    revokedAt?: moment.Moment | undefined;
    mask!: string | undefined;

    constructor(data?: IToken) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.issuedAt = _data["issuedAt"] ? moment(_data["issuedAt"].toString()) : <any>undefined;
            this.expiresAt = _data["expiresAt"] ? moment(_data["expiresAt"].toString()) : <any>undefined;
            this.revokedAt = _data["revokedAt"] ? moment(_data["revokedAt"].toString()) : <any>undefined;
            this.mask = _data["mask"];
        }
    }

    static fromJS(data: any): Token {
        data = typeof data === 'object' ? data : {};
        let result = new Token();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["issuedAt"] = this.issuedAt ? this.issuedAt.toISOString() : <any>undefined;
        data["expiresAt"] = this.expiresAt ? this.expiresAt.toISOString() : <any>undefined;
        data["revokedAt"] = this.revokedAt ? this.revokedAt.toISOString() : <any>undefined;
        data["mask"] = this.mask;
        return data;
    }
}

export interface IToken {
    id: string;
    name: string | undefined;
    issuedAt: moment.Moment;
    expiresAt: moment.Moment;
    revokedAt?: moment.Moment | undefined;
    mask: string | undefined;
}

export class TokenResponse implements ITokenResponse {
    token!: string | undefined;

    constructor(data?: ITokenResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): TokenResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TokenResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        return data;
    }
}

export interface ITokenResponse {
    token: string | undefined;
}

export class UpdateApplicationSchema implements IUpdateApplicationSchema {
    name!: string | undefined;
    description!: string | undefined;
    mainBranch!: string | undefined;
    defaultReleaseLifetime?: string | undefined;
    defaultLatestReleaseLifetime?: string | undefined;

    constructor(data?: IUpdateApplicationSchema) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            this.mainBranch = _data["mainBranch"];
            this.defaultReleaseLifetime = _data["defaultReleaseLifetime"];
            this.defaultLatestReleaseLifetime = _data["defaultLatestReleaseLifetime"];
        }
    }

    static fromJS(data: any): UpdateApplicationSchema {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateApplicationSchema();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["mainBranch"] = this.mainBranch;
        data["defaultReleaseLifetime"] = this.defaultReleaseLifetime;
        data["defaultLatestReleaseLifetime"] = this.defaultLatestReleaseLifetime;
        return data;
    }
}

export interface IUpdateApplicationSchema {
    name: string | undefined;
    description: string | undefined;
    mainBranch: string | undefined;
    defaultReleaseLifetime?: string | undefined;
    defaultLatestReleaseLifetime?: string | undefined;
}

export class UpdateBranchSchema implements IUpdateBranchSchema {
    releaseLifetime?: string | undefined;
    latestReleaseLifetime?: string | undefined;
    useDefaultReleaseLifetime?: boolean;

    constructor(data?: IUpdateBranchSchema) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.releaseLifetime = _data["releaseLifetime"];
            this.latestReleaseLifetime = _data["latestReleaseLifetime"];
            this.useDefaultReleaseLifetime = _data["useDefaultReleaseLifetime"];
        }
    }

    static fromJS(data: any): UpdateBranchSchema {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBranchSchema();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["releaseLifetime"] = this.releaseLifetime;
        data["latestReleaseLifetime"] = this.latestReleaseLifetime;
        data["useDefaultReleaseLifetime"] = this.useDefaultReleaseLifetime;
        return data;
    }
}

export interface IUpdateBranchSchema {
    releaseLifetime?: string | undefined;
    latestReleaseLifetime?: string | undefined;
    useDefaultReleaseLifetime?: boolean;
}

export class UpdateReleaseSchema implements IUpdateReleaseSchema {
    description?: string | undefined;

    constructor(data?: IUpdateReleaseSchema) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): UpdateReleaseSchema {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateReleaseSchema();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        return data;
    }
}

export interface IUpdateReleaseSchema {
    description?: string | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
